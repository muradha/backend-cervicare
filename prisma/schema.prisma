generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(160)
  email           String    @unique @db.VarChar(200)
  password        String
  profile_picture String?
  birth_date      DateTime? @db.Date
  gender          Gender?
  phone           String?   @db.Char(20)
  roleId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  articles        Article[]
  role            Role      @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique @db.VarChar(80)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@map("roles")
}

model Article {
  id        String   @id @default(uuid())
  title     String   @unique @db.VarChar(200)
  content   String   @db.MediumText
  status    Status   @default(PENDING)
  thumbnail String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "articles_userId_fkey")
  @@map("articles")
}

model HealthFacility {
  id                String                 @id @default(uuid())
  name              String                 @db.VarChar(100)
  type              String                 @db.VarChar(100)
  photo             String?
  openHour          Int
  closeHour         Int
  publicFacilities  FacilityLink[]
  facilityLocation  FacilityLocation?
  medicalFacilities MedicalCollaboration[]

  @@map("health_facilities")
}

model FacilityLocation {
  id               String         @id @default(uuid())
  healthFacilityId String         @unique
  address          String
  province         String         @db.VarChar(100)
  city             String?        @db.VarChar(150)
  regency          String?        @db.VarChar(160)
  district         String?        @db.VarChar(160)
  urbanVillage     String?        @db.VarChar(160)
  rural            String?        @db.VarChar(160)
  latitude         Decimal?       @db.Decimal(8, 6)
  longitude        Decimal?       @db.Decimal(9, 6)
  healthFacility   HealthFacility @relation(fields: [healthFacilityId], references: [id], onDelete: Cascade)

  @@map("facility_location")
}

model MedicalFacility {
  id               String                 @id @default(uuid())
  name             String                 @db.VarChar(100)
  healthFacilities MedicalCollaboration[]

  @@map("medical_facilities")
}

model MedicalCollaboration {
  healthFacilityId  String
  medicalFacilityId String
  healthFacility    HealthFacility  @relation(fields: [healthFacilityId], references: [id], onDelete: Cascade)
  medicalFacility   MedicalFacility @relation(fields: [medicalFacilityId], references: [id], onDelete: Cascade)

  @@unique([healthFacilityId, medicalFacilityId])
  @@index([medicalFacilityId], map: "medical_collaboration_medicalFacilityId_fkey")
  @@map("medical_collaboration")
}

model PublicFacility {
  id             String         @id @default(uuid())
  name           String         @db.VarChar(100)
  healthFacility FacilityLink[]

  @@map("public_facilities")
}

model FacilityLink {
  healthFacilityId String
  publicFacilityId String
  healthFacility   HealthFacility @relation(fields: [healthFacilityId], references: [id], onDelete: Cascade)
  publicFacility   PublicFacility @relation(fields: [publicFacilityId], references: [id], onDelete: Cascade)

  @@unique([healthFacilityId, publicFacilityId])
  @@index([publicFacilityId], map: "facility_link_publicFacilityId_fkey")
  @@map("facility_link")
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  PENDING
  REJECT
  APPROVE
}
